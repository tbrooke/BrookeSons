<?xml version='1.0' encoding='utf-8' ?>
<feed xml:lang='en-US' xmlns='http://www.w3.org/2005/Atom'>
  <id>http://brookesonsweb.com/</id>
  <title>http://brookesonsweb.com</title>
  <updated>2013-01-04T21:59:41-05:00</updated>
  <link href='http://brookesonsweb.com/blog.atom' rel='self' type='application/atom+xml' />
  <link href='http://brookesonsweb.com/' rel='alternate' type='text/html' />
  <entry>
    <id>http://brookesonsweb.com/blog/2013/01/04/lets-learn-oauth2-clio-part-1.html</id>
    <title>Learning Oauth 2</title>
    <updated>2013-01-04T21:59:41-05:00</updated>
    <published>2013-01-04T00:00:00Z</published>
    <link href='http://brookesonsweb.com/blog/2013/01/04/lets-learn-oauth2-clio-part-1.html' rel='alternate' type='text/html' />
    <summary>
      Learning OAuth2

Part I  of Creating an app using the Clio API

The http specification and the REST specification (Representational State Transfer) form the backbone of the web. Through a RESTful interface browsers can communicate with web applications and web applications can communicate with each other. By providing a public API the owner of a web app can allow others to communicate with his app and allow for the exchange of data between his app and the world. Clio has recently published their RESTful API and this is a great boon to developers wanting to integrate with the Clio platform.

Clio is...
    </summary>
    <content type='html'>
      &lt;h1&gt;Learning OAuth2&lt;/h1&gt;

&lt;h2&gt;Part I  of Creating an app using the Clio API&lt;/h2&gt;

&lt;p&gt;The http specification and the REST specification (Representational State Transfer) form the backbone of the web. Through a RESTful interface browsers can communicate with web applications and web applications can communicate with each other. By providing a public API the owner of a web app can allow others to communicate with his app and allow for the exchange of data between his app and the world. Clio has recently published their RESTful API and this is a great boon to developers wanting to integrate with the Clio platform.&lt;/p&gt;

&lt;p&gt;Clio is a cloud based law practice management tool developed in Ruby on Rails. The API documentation is located at: &lt;a href=&quot;http://api-docs.goclio.com/v1/index.html&quot;&gt;Clio API Docs&lt;/a&gt;. Since Clio is a legal application designed for lawyers one of the primary considerations is the security of the data. By providing a public API you do not want to allow people to muck around with your data without proper authority and even then you want to keep their access limited. To do this you must utilize a modern authentication system such as OAuth.&lt;/p&gt;

&lt;p&gt; The authentication used by Clio is the OAuth2 method and the first step in creating an application that communicates through the API is to get properly authenticated which sets up a secure session between the server and the client. Clio provides sample Ruby code that does this but it would be helpful to get familiar with the workings of OAuth2 before diving in. OAuth2 is a protocal adopted by Google and several others to establish a standardized secure web authentication protocal. The specification is set forth at &lt;a href=&quot;http://oauth.net/2/&quot;&gt;OAuth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The analogy set out in an introduction to OAuth2 is that of giving a valet key to a parking lot attendant. It grants limited access to your car but not full access to the trunk or whatever. It is the same with OAuth2 authentication. You can grant someone, or in most cases another web site, limited access to the resources on your web site without giving them a password or full access. Clio uses what is know as a &lt;em&gt;Grant type authorization&lt;/em&gt; based on the obtaining of an authorization code or token to allow access.&lt;/p&gt;

&lt;p&gt;Security, again is a primary consideration. You are granting access under the covers by allowing a specified web site to issue a RESTful API request to Clio and then returning a json string in response to that request. Only the specified client from the specified web site, with the specified Client Id and Client Secret can do this and only for 10 minutes without renewed authority.&lt;/p&gt;

&lt;p&gt;Some times it helps to manually walk through a procedure and one of the easiest ways to start working with OAuth2 is to check out Google's&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/oauthplayground/&quot;&gt;OAuth2 Playground&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; We will use the playground to demonstrate exactly how OAuth2 works.&lt;/p&gt;

&lt;p&gt;To get started you have to set up the Clio side of things by creating a new app in your Clio account. The Clio documentation describes this process and it is fairly easy to get started. When setting up your application set up:&lt;/p&gt;

&lt;p&gt; &lt;em&gt;https://developers.google.com/oauthplayground&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As the url for your application since this is the callback url needed to connect Clio and the Google playground together. The Clio side is the server side of your application. When you have this set up you can go to the Google playground and set up the client side of the equation.&lt;/p&gt;

&lt;p&gt;To set this up for Clio you must use a custom configuration which you can set up by clicking on the little sprocket on the top right hand side of the screen. This will produce a drop down window entitled OAuth2 configuration. You are creating a Server side configuration so indicate that in the selection window and for OAuth endpoints; you are using custom instead of Google. After you complete those fill in:&lt;/p&gt;

&lt;p&gt;Authorization endpoint: https://app.goclio.com/oauth/authorize/&lt;/p&gt;

&lt;p&gt;Token endpoint: https://app.goclio.com/oauth/token&lt;/p&gt;

&lt;p&gt;Access Token location: Authorization header w/ Bearer prefix&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;blog/assets/setup.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now put in the OAuth Client ID and Client Secret that you received from Clio&lt;/p&gt;

&lt;p&gt;You are now set up and ready to move on to Step 2 where you set up and authorize the API. The way the authorization works is that you present your credentials, which we have just set up with the Client ID and Client Secret, to Clio and if everything is in order Clio issues an access token. This is sent back and by using that token you have access to Clio. The token is limited in that it can only be used by your Web Application to log into Clio and it is only good for 10 minutes.&lt;/p&gt;

&lt;p&gt;Lets go over to the left hand side of the screen and beside the Authorize APIs button put in:&lt;/p&gt;

&lt;p&gt;https://app.goclio.com/oauth/approval&lt;/p&gt;

&lt;p&gt;now click on the Authorize APIs button and viola you're at Clio&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;blog/assets/ClioConnect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click OK and you will be taken back to Google with the access Token filled in for you:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;blog/assets/connected.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are ready to go and we can move on to step 3 which allows us to configure a request to the API&lt;/p&gt;

&lt;p&gt;under HTTP Method Add Headers (in the little box above the request space) put in Host and for the header value put in:  app.goclio.com&lt;/p&gt;

&lt;p&gt;Now we are ready to put in our RESTful request - We are performing a simple GET request which we can select in the selection window and let's start with something simple like Who am I&lt;/p&gt;

&lt;p&gt;https://app.goclio.com//api/v1/users/who_am_i&lt;/p&gt;

&lt;p&gt;If we have done everything right we get back:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;blog/assets/Me.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#x000A;{&quot;account&quot;:{&quot;id&quot;:&quot;8DTsvjEvjIfpufuz/vefRw&quot;,&quot;owner&quot;:{&quot;id&quot;:343991381,&quot;name&quot;:&quot;Tom Brooke&quot;,&amp;#x000A;   &quot;url&quot;:&quot;/api/v1/users/343991381&quot;}, &quot;name&quot;:&quot;Law Office of Tom Brooke&quot;,&amp;#x000A;   &quot;maildrop_address&quot;:&quot;643fedb36@maildrop.goclio.com&quot;,&quot;created_at&quot;:&quot;2011-03-14T20:15:50+00:00&quot;,&amp;#x000A;   &quot;updated_at&quot;:&quot;2012-11-15T00:07:53+00:00&quot;},&quot;user&quot;:{&quot;id&quot;:343991381,&quot;email&quot;:&quot;tom.brooke@gmail.com&quot;,&amp;#x000A;   &quot;first_name&quot;:&quot;Tom&quot;,&quot;last_name&quot;:&quot;Brooke&quot;,&quot;time_zone&quot;:&quot;Eastern Time (US &amp; Canada)&quot;,&amp;#x000A;   &quot;enabled&quot;:true,&quot;subscription_plan&quot;:&quot;Attorney&quot;,&quot;created_at&quot;:&quot;2011-03-14T20:15:51+00:00&quot;,&amp;#x000A;   &quot;updated_at&quot;:&quot;2011-10-06T04:53:43+00:00&quot;}}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;That's me - How cool is that !!&lt;/p&gt;

&lt;p&gt;Now let's look up our matters which is only one at this point:&lt;/p&gt;

&lt;p&gt;then enter your GET request as a full address ie: https://app.goclio.com//api/v1/matters&lt;/p&gt;

&lt;p&gt;An] viola we get our response:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#x000A;{&quot;matters&quot;:[{&quot;id&quot;:1017058013,&quot;client&quot;:{&quot;id&quot;:863215887,&quot;name&quot;:&quot;Sam May&quot;,&amp;#x000A;  &quot;url&quot;:&quot;/api/v1/contacts/863215887&quot;},&amp;#x000A;  &quot;display_number&quot;:&quot;00001-May&quot;,&quot;description&quot;:&quot;New Matter&quot;,&amp;#x000A;  &quot;status&quot;:&quot;Open&quot;,&quot;open_date&quot;:&quot;2013-01-04&quot;,&quot;close_date&quot;:null,&quot;pending_date&quot;:null,&amp;#x000A;  &quot;location&quot;:&quot;&quot;,&quot;client_reference&quot;:&quot;&quot;,&quot;responsible_attorney&quot;:{&quot;id&quot;:343991381,&quot;name&quot;:&quot;Tom Brooke&quot;,&amp;#x000A;  &quot;url&quot;:&quot;/api/v1/users/343991381&quot;},&quot;billable&quot;:true,&amp;#x000A;  &quot;maildrop_address&quot;:&quot;643fedb36+matter1017058013@maildrop.goclio.com&quot;,&amp;#x000A;  &quot;created_at&quot;:&quot;2013-01-04T19:02:26+00:00&quot;,&quot;updated_at&quot;:&quot;2013-01-04T19:02:26+00:00&quot;}],&amp;#x000A;  &quot;records&quot;:1,&quot;limit&quot;:1000,&quot;next_offset&quot;:1017058013}&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Now you can go through the Clio routing table
&lt;a href=&quot;http://api-docs.goclio.com/http-routingtable.html&quot;&gt;Routing Table&lt;/a&gt; and you can experiment with any query you want. That's it. Of course we will be performing all of this automatically as in the Ruby code provided by Clio or we can write our own code in Ruby, Clojure or whatever. In future posts we'll explore how to set this up using Ruby and create a simple Sinatra application that runs on Heroku and talks to the Clio API&lt;/p&gt;

&lt;p&gt;Feel free to leave comments or questions and consider joining our Google Group at: &lt;a href=&quot;https://groups.google.com/forum/?fromgroups=#!forum/clio-developers&quot;&gt;Clio Developer Group&lt;/a&gt; where we discuss these things. In the next post we'll put together a Sinatra app that uses the API and authentication we have covered here.&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://brookesonsweb.com/blog/2012/12/16/Twin-Maps-Revisited.html</id>
    <title>Twin Maps Revisited</title>
    <updated>2013-01-04T21:59:05-05:00</updated>
    <published>2012-12-16T00:00:00Z</published>
    <link href='http://brookesonsweb.com/blog/2012/12/16/Twin-Maps-Revisited.html' rel='alternate' type='text/html' />
    <summary>
      Success is not a place at which one arrives but rather the spirit with which one undertakes and continues the journey.
      Alex Noble   via the September 8, 2010 Twinmaps post by Richard Brooke
      
      
      
      
       "Dear America" - Twin Maps Trailer from Twin Maps on Vimeo.
      
      A perfect start for the Brooke and Sons Blog
      ...
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;em&gt;Success is not a place at which one arrives but rather the spirit with which one undertakes and continues the journey.&lt;/em&gt;
      Alex Noble   via the September 8, 2010 &lt;a href=&quot;http://www.twinmaps.com/&quot;&gt;Twinmaps&lt;/a&gt; &lt;a href=&quot;http://www.twinmaps.com/post/139283-arrival-in-cleveland&quot;&gt;post&lt;/a&gt; by Richard Brooke&lt;/p&gt;
      
      &lt;iframe src=&quot;http://player.vimeo.com/video/24402425?title=0&amp;amp;byline=0&amp;amp;portrait=0&amp;amp;badge=0&amp;amp;color=ffffff&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;
      
      
      &lt;p&gt; &lt;p&gt;&lt;a href=&quot;http://vimeo.com/24402425&quot;&gt;&quot;Dear America&quot; - Twin Maps Trailer&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/user4721457&quot;&gt;Twin Maps&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;
      
      &lt;p&gt;A perfect start for the Brooke and Sons Blog&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://brookesonsweb.com/blog/2012/12/05/clojure-day.html</id>
    <title>Clojure Day Report</title>
    <updated>2013-01-04T21:59:05-05:00</updated>
    <published>2012-12-05T00:00:00Z</published>
    <link href='http://brookesonsweb.com/blog/2012/12/05/clojure-day.html' rel='alternate' type='text/html' />
    <summary>
      Gregory Brown is well know in the Ruby Community and Mendicant University has spawned many Ruby developers. Recently he decided to step out of Ruby and take a look at Clojure. The result was Clojure Day and a summary follows:

In Practicing  Ruby issue 5.8  Gregory described his experiences in studying swarming behavior and how they lead to the discovery of a Rich Hickey project simulating an ant colony written in Clojure. Gregory decided to look into the Clojure code then Clojure itself and the Mendicant University Clojure Day was born. Several respondents expressed an interest in learning more...
    </summary>
    <content type='html'>
      &lt;p&gt;Gregory Brown is well know in the Ruby Community and Mendicant University has spawned many Ruby developers. Recently he decided to step out of Ruby and take a look at Clojure. The result was Clojure Day and a summary follows:&lt;/p&gt;

&lt;p&gt;In Practicing  &lt;a href=&quot;https://practicingruby.com/articles/92&quot;&gt;Ruby issue 5.8&lt;/a&gt;  Gregory described his experiences in studying swarming behavior and how they lead to the discovery of a Rich Hickey &lt;a href=&quot;https://gist.github.com/1093917&quot;&gt;project&lt;/a&gt; simulating an ant colony written in Clojure. Gregory decided to look into the Clojure code then Clojure itself and the Mendicant University Clojure Day was born. Several respondents expressed an interest in learning more about Clojure and it was decided that an email format would be best, with everyone researching on their own then reporting back to the group on November 29 [Clojure Day].&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;Gregory kicked things off around midnight on the 18th and a number of participants started in with their posts.  Several folks were doing some reading; Morgan Nelson started Marick's &lt;a href=&quot;https://leanpub.com/fp-oo&quot;&gt;Functional Programming for the Object Oriented Programmer&lt;/a&gt;, a few others started reading &lt;a href=&quot;http://pragprog.com/book/shcloj2/programming-clojure&quot;&gt;Programming Clojure&lt;/a&gt;. Also there was the usual tool discussion with some trying to tackle Emacs along with Clojure and others sticking with Vim or whatever.&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;Gregory went back to Puzzle Node #4 &lt;a href=&quot;http://puzzlenode.com/puzzles/4-robots-vs-lasers&quot;&gt;Robots v Lasers&lt;/a&gt; and tried to port a solution from Ruby to Clojure:&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;So far, I've translated my parser class. Here's what I came up with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;#x000A;&lt;br /&gt;&amp;#x000A;------------------------------------------------------&amp;#x000A;&amp;#x000A;(def conveyor-symbols { \# :wall \| :laser })&amp;#x000A;(def robot-symbol &quot;X&quot;)&amp;#x000A;&amp;#x000A;(defn wall-data [text] (map #(conveyor-symbols %) text))&amp;#x000A;&amp;#x000A;(defn conveyor-data [input]&amp;#x000A;  (let [[north middle south] (clojure.string/split input #&quot;\n&quot;)]&amp;#x000A;    { :north_side     (wall-data north)&amp;#x000A;      :south_side     (wall-data south)&amp;#x000A;      :robot_position (.indexOf middle robot-symbol)}))&amp;#x000A;&amp;#x000A;(pr (conveyor-data &quot;#|#|#|##\n---X----\n###||###&quot;))&amp;#x000A;&amp;#x000A;------------------------------------------------------&amp;#x000A;&amp;#x000A;The original Ruby code looked like this:&amp;#x000A;&amp;#x000A;------------------------------------------------------&amp;#x000A;&amp;#x000A;module Robotic&amp;#x000A;  class Parser&amp;#x000A;    CONVEYOR_SYMBOLS = { &quot;#&quot; =&gt; :wall, &quot;|&quot; =&gt; :laser }&amp;#x000A;    ROBOT_SYMBOL = &quot;X&quot;&amp;#x000A;&amp;#x000A;    def initialize(text)&amp;#x000A;      @text = text&amp;#x000A;    end&amp;#x000A;&amp;#x000A;    def conveyor_data&amp;#x000A;      north, middle, south = text.split&amp;#x000A;      { :north_side =&gt; wall_data(north),&amp;#x000A;        :south_side =&gt; wall_data(south),&amp;#x000A;        :robot_position =&gt; middle.index(ROBOT_SYMBOL) }&amp;#x000A;    end&amp;#x000A;&amp;#x000A;    private&amp;#x000A;&amp;#x000A;    attr_reader :text&amp;#x000A;&amp;#x000A;    def wall_data(wall_text)&amp;#x000A;      wall_text.chars.map { |e| CONVEYOR_SYMBOLS[e] }&amp;#x000A;    end&amp;#x000A;  end&amp;#x000A;end&amp;#x000A;&amp;#x000A;------------------------------------------------------&amp;#x000A;&lt;/code&gt;&lt;/pre&gt;


&lt;br /&gt;


&lt;p&gt;He had not completed it but he stated how impressed he was that it was fairly easy&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;Shane Emmons revisited a Noir project  &lt;a href=&quot;https://github.com/semmons99/emmons.io&quot;&gt;emmons.io&lt;/a&gt; he had started a couple of years ago and pointed out some views where he had done some work with &lt;a href=&quot;https://github.com/weavejester/hiccup&quot;&gt;Hiccup&lt;/a&gt;, a Clojure based templating language:&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;Shane along with some others looked at &lt;a href=&quot;http://www.4clojure.com/&quot;&gt;4clojure&lt;/a&gt; a Clojure problem site sort of like Puzzlenode or Ruby Koans.&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;Carol Nichols mentioned a talk by Stuart Holloway on the &lt;a href=&quot;http://www.infoq.com/presentations/Impedance-Mismatch&quot;&gt;impedence mismatch&lt;/a&gt; between objects and relational databases lead to a discussion about &lt;a href=&quot;http://www.datomic.com/&quot;&gt;Datomic&lt;/a&gt; but no one had much experience with it. Finally there was a general discussion about functional v object oriented programming.  We ended with a video of live programming using Clojure, Emacs and Supercollider in &lt;a href=&quot;http://vimeo.com/22798433&quot;&gt;Overtone&lt;/a&gt;&lt;/p&gt;

&lt;br /&gt;


&lt;p&gt;It was an interesting experience. It sounds like most of the participants intend to explore Clojure further but not formal plans were made.&lt;br /&gt;&lt;/p&gt;
    </content>
  </entry>
  <entry>
    <id>http://brookesonsweb.com/blog/2012/11/07/main-street-on-rails.html</id>
    <title>Main Street Mission on Rails</title>
    <updated>2013-01-04T21:59:05-05:00</updated>
    <published>2012-11-07T00:00:00Z</published>
    <link href='http://brookesonsweb.com/blog/2012/11/07/main-street-on-rails.html' rel='alternate' type='text/html' />
    <summary>
      
      
      I am a director at Main Street Mission in China Grove, North Carolina. In one of our planning sessions we decided that we needed to "computerize" our records. I am the "computer guy" so I started to see what we was available. I have worked with Rails some but I wasn't sure it would work in our situation. The inspiration that changed my mind was Jordan Byron's
      Mission of Mercy project. I associated Rails with Web
      apps and after firing up Mission of Mercy it opened my eyes to the fact
      that Rails makes a great platform for an app that may or...
    </summary>
    <content type='html'>
      &lt;p&gt;&lt;img width=&quot;386&quot; height=&quot;325&quot; alt=&quot;Main Street Mission&quot; id=&quot;image18&quot; src=&quot;http://brookesonsweb.com/blog/assets/MainStreet-logo.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I am a director at Main Street Mission in China Grove, North Carolina. In one of our planning sessions we decided that we needed to &quot;computerize&quot; our records. I am the &quot;computer guy&quot; so I started to see what we was available. I have worked with Rails some but I wasn't sure it would work in our situation. The inspiration that changed my mind was &lt;a href=&quot;http://jordanbyron.com&quot;&gt;Jordan Byron's&lt;/a&gt;
&lt;a href=&quot;https://github.com/mission-of-mercy/mission-of-mercy#readme&quot;&gt;Mission of Mercy&lt;/a&gt; project. I associated Rails with Web
apps and after firing up Mission of Mercy it opened my eyes to the fact
that Rails makes a great platform for an app that may or may not live on
the external web. Also I liked the way Jordan approached Rails as a tool to
do some social and humanitarian good rather than just a tool to launch a
startup and make a  million dollars. I am learning Rails and my Law firm
now runs on Clio which is a Rails app so I knew that Rails could be a good
fit for a business platform&lt;/p&gt;

&lt;p&gt;I had looked at database platforms like Access, at off the shelf software
and even played with Salesforce some since they offer it free to nonprofits
and nothing seemed to be a good fit. After seeing Mission of Mercy I wrote
Jordan and told him that I was impressed with it and thought that something
similar would be a good fit for Main Street Mission, he agreed, told me he
was associated with &lt;a href=&quot;http://mendicantuniversity.org&quot;&gt;Mendicant University&lt;/a&gt;, we got Corey on Board and here
we are. The scales were an early thing with the joke about Rails on scales and
one of the reasons that Jordan selected Corey was his skill with scales.&lt;/p&gt;

&lt;p&gt;As it has developed I am very happy with the decision. Especially after two
Railsconf's I believe that one of the biggest advantages of Ruby and Rails
is the active and open community and the fact that both Ruby and Rails are
open source. This is a perfect fit for &lt;a href=&quot;http://msm2.webvanta.com/&quot;&gt;Main Street Mission&lt;/a&gt; whose whole
purpose is to be an open and caring community. There may be other languages
and platforms that may be a better fit technically but there are no other
languages with the huge community that is willing to jump in and help each
other. It is the perfect way to carry the ethos of Main Street Mission out
of China Grove and I think it is a good to way bring some of the ethos of
the Rails community into China Grove and Main Street Mission&lt;/p&gt;

&lt;p&gt;Rails also gives us some security because even if Mendicant University
disappears any Ruby developer with a github account can pick up
on our code and run with it. There are active Ruby communities in both
Charlotte and Raleigh so we can get local help if we need it. Also
hopefully the code will grow beyond us and other pantries can adopt it,
modify it and help each other&lt;/p&gt;

&lt;p&gt;Finally from a technical perspective Rails has the speed and more than
enough sophistication to handle the project. It's user interface uses the
tools of the web so we have everything from html to handlebars for us to
work with.  We have ten of thousands of gems to help us. We have a platform
that embraces agile and behavior driven development which makes it perfect
for our non technical folks to keep up with the techies&lt;/p&gt;

&lt;p&gt;So where else other than Rails could we get Anne, Robin and Tom squared
here in China Grove working with Corey in Pennsylvania, Jordan in Connecticut,
Shane in Seattle and others yet to come working together on a project like
this to help make it easier for a few folks in China Grove down on their
luck to get something to eat.&lt;/p&gt;
    </content>
  </entry>
</feed>
